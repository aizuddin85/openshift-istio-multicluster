---
- name: create project
  command: oc --context {{ cluster.context }} new-project istio-system
  register: oc_res
  failed_when: oc_res.rc >= 2

- name: create project
  command: oc --context {{ cluster.context }} adm policy add-scc-to-user anyuid -z istio-citadel-service-account -n istio-system

- name: set correct scc for istio-sidecar-injector-service-account
  command: oc --context {{ cluster.context }} adm policy add-scc-to-user anyuid -z istio-sidecar-injector-service-account -n istio-system    

- name: check if cacerts secret exists already
  shell: oc --context {{ cluster.context }} get secret cacerts -n istio-system | grep cacerts | wc -l
  register: lines
  when: enable_mTLS

- name: delete cacerts secret if it exists
  command: oc --context {{ cluster.context }} delete secret cacerts -n istio-system
  when: enable_mTLS and lines.stdout == "1" 

- name: add ca root secret
  command: oc --context {{ cluster.context }} create secret generic cacerts -n istio-system --from-file={{ certificate_dir }}
  when: enable_mTLS

- name: install istio remote
  shell: | 
    {{ role_path}}/files/bin/helm template {{ role_path }}/files/charts/istio-remote --namespace istio-system \
    --name istio-remote \
    --set global.remotePilotAddress={{ (clusters | selectattr('istio_control_plane') | list)[0].pilot_ip }} \
    --set global.remotePolicyAddress={{ (clusters | selectattr('istio_control_plane')| list)[0].policy_ip }} \
    --set global.remoteTelemetryAddress={{ (clusters | selectattr('istio_control_plane') | list)[0].telemetry_ip }} \
    --set global.proxy.envoyStatsd.enabled=true \
    --set global.proxy.envoyStatsd.host={{ (clusters | selectattr('istio_control_plane') | list)[0].statsd_ip }} \
    --set global.remoteZipkinAddress={{ (clusters | selectattr('istio_control_plane') | list)[0].jaeger_ip }} \
    --set security.selfSigned=false | \   
    oc --context {{ cluster.context }} apply -f -
  when: enable_mTLS

#    --set global.mtls.enabled=true | \  

- name: install istio remote
  shell: | 
    {{ role_path}}/files/bin/helm template {{ role_path }}/files/charts/istio-remote --namespace istio-system \
    --name istio-remote \
    --set global.remotePilotAddress={{ (clusters | selectattr('istio_control_plane') | list)[0].pilot_ip }} \
    --set global.remotePolicyAddress={{ (clusters | selectattr('istio_control_plane')| list)[0].policy_ip }} \
    --set global.remoteTelemetryAddress={{ (clusters | selectattr('istio_control_plane') | list)[0].telemetry_ip }} \
    --set global.proxy.envoyStatsd.enabled=true \
    --set global.proxy.envoyStatsd.host={{ (clusters | selectattr('istio_control_plane') | list)[0].statsd_ip }} \
    --set global.remoteZipkinAddress={{ (clusters | selectattr('istio_control_plane') | list)[0].jaeger_ip }} | \
    oc --context {{ cluster.context }} apply -f -
  when: not enable_mTLS 

# istio sidecar injector in remote site must be the same of main site (for openshift mesh vs istio misaligments)      
- name: extract istio sidecar injector config map
  command: oc --context {{ (clusters | selectattr('istio_control_plane') | list)[0].context }} extract configmap/istio-sidecar-injector -n istio-system --to=/tmp --keys=config --confirm=true    

- name: delete current istio sidecar injector config map
  command: oc --context {{ cluster.context }} delete configmap istio-sidecar-injector -n istio-system
  
- name: create istio sidecar injector configmap
  command: oc --context {{ cluster.context }} create configmap istio-sidecar-injector -n istio-system --from-file=/tmp/config  